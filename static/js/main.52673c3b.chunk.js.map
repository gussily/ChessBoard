{"version":3,"sources":["game-components.js","index.js"],"names":["pieceRenders","opponent","player","players","PLAYER_1","PLAYER_2","NONE","ChessBoard","pieceList","sel","castled","this","pieces","genPieces","selectedPiece","handleCastled","map","x","copy","player1","player2","getPiecesFromPlayer","filter","hasLegalMove","length","pieceRender","Array","keys","y","i","getPiece","origLoc","newLoc","cp","updatePiece","EmptyPiece","handleQueening","piece","yNeeded","Queen","newPiece","p","updateLocation","returned","selected","king","getPlayerKing","opp","enemyPieces","bcp","a","getMoveOptions","v","indexOf","ChessPiece","moveFilters","complexMoveFilters","push","setPieceUnicode","white","black","pieceUnicode","board","moveOptions","i1","p1","opt","pieceMove","kingUnderAttack","allPieces","getRangeOfMotion","move","getPieceXY","applyMoveFilters","through","getAllLegalMoves","candidates","King","moveIsOnBoard","normalOpts","kingside","checkCastles","queenside","side","relevantSquares","genCastleSquares","checkPiecePlacement","checkMiddlePieces","checkSafeSquares","checkSquares","slice","console","log","inCheck","unsafeSquares","rook","Knight","Pawn","checkTaking","checkMove2","opts","thisX","thisPlayer","Math","abs","thisY","between","RangePiece","allMoves","pieceSet","toAdd","applyRangeMoveChecker","concat","Rook","down","up","right","left","Bishop","upr","upl","downr","downl","diag","straight","initBlackPieces","emptySquares","initWhitePieces","initBoard","Square","props","squareColor","floor","cn","className","onClick","Board","squares","rn","renderSquare","renderRow","React","Component","Game","state","history","playerTurn","moveNumber","moveStage","pieceSelected","handlePieceSelect","handlePieceMove","hist","newSquares","selectPiece","setState","isLegalMove","updatedSquares","unselectPiece","handleKingMove","startLoc","endLoc","startPiece","endPiece","rookI","step","status","current","calcWinner","canMove","playerCanMove","calculateWinner","moves","desc","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52673c3b.chunk.js","sourcesContent":["\r\nexport const pieceRenders = {\r\n\tKING: '\\u2654',\r\n\tQUEEN: 'Q', \r\n\tROOK: 'R',\r\n\tBISHOP: 'B',\r\n\tKNIGHT: 'N',\r\n\tPAWN: 'P',\r\n\tNONE: ''\r\n}\r\n\r\nexport const includes = (a, v) => a.indexOf(v) !== -1\r\nexport function opponent(player) {\r\n\tif (player == players.PLAYER_1) {\r\n\t\treturn players.PLAYER_2\r\n\t}\r\n\telse if (player == players.PLAYER_2) {\r\n\t\treturn players.PLAYER_1\r\n\t}\r\n}\r\n\r\nexport const players = {\r\n\tPLAYER_1: 'white',\r\n\tPLAYER_2: 'black',\r\n\tNONE: 'empty'\r\n}\r\n\r\nexport class ChessBoard {\r\n\tconstructor(pieceList, sel=null, castled=null) {\r\n\t\tthis.pieces = this.genPieces(pieceList)\r\n\t\tthis.pieceList = pieceList\r\n\t\tthis.selectedPiece = sel\r\n\t\tthis.handleCastled(castled)\r\n\t}\r\n\t\r\n\tcopy() {\r\n\t\treturn new ChessBoard(this.pieceList.map(x => x.copy()), this.selectedPiece, this.castled)\r\n\t}\r\n\t\r\n\thandleCastled(castled) {\r\n\t\tif (castled) {\r\n\t\t\tthis.castled = castled\r\n\t\t} else {\r\n\t\t\tlet player1 = players.PLAYER_1\r\n\t\t\tlet player2 = players.PLAYER_2\r\n\t\t\t\r\n\t\t\tthis.castled = {player1: false, player2: false}\r\n\t\t}\r\n\t}\r\n\t\r\n\tplayerCanMove(player) {\r\n\t\tlet pieces = this.getPiecesFromPlayer(player)\r\n\t\tpieces = pieces.filter(x => x.hasLegalMove(this))\r\n\t\treturn pieces.length > 0\r\n\t}\r\n\t\r\n\tgetPiecesFromPlayer(player) {\r\n\t\tlet pieces = this.pieceList.filter(x => x.player == player)\r\n\t\treturn pieces\r\n\t}\r\n\t\r\n\tgetPlayerKing(player) {\r\n\t\treturn this.pieceList.filter(x => (x.player == player) && (x.pieceRender == pieceRenders.KING))[0]\r\n\t}\r\n\t\r\n\tgenPieces(pieceList) {\r\n\t\t\r\n\t\treturn [...Array(8).keys()]\r\n\t\t\t.map(\r\n\t\t\t\ty => [...Array(8).keys()]\r\n\t\t\t\t\t.map(x => pieceList[8 * y + x])\r\n\t\t\t)\r\n\t}\r\n\t\r\n\tgetPiece(i) {\r\n\t\treturn this.pieceList[i]\r\n\t}\r\n\t\r\n\tgetPieceXY(x, y) {\r\n\t\treturn this.getPiece(y * 8 + x)\r\n\t}\r\n\t\r\n\tpieceMove(origLoc, newLoc) {\r\n\t\tlet cp = this.copy()\r\n\t\tcp.updatePiece(newLoc, cp.getPiece(origLoc));\r\n\t\tcp.updatePiece(origLoc, new EmptyPiece(origLoc));\r\n\t\tcp.handleQueening(newLoc)\r\n\t\treturn cp\r\n\t}\r\n\t\r\n\thandleQueening(newLoc) {\r\n\t\tlet piece = this.getPiece(newLoc)\r\n\t\tlet yNeeded = piece.player == players.PLAYER_1 ? 0 : 7\r\n\t\tif ((piece.pieceRender == pieceRenders.PAWN) &&\r\n\t\t\t(piece.y == yNeeded)) {\r\n\t\t\tthis.updatePiece(newLoc, new Queen(piece.player, newLoc))\r\n\t\t}\r\n\t}\r\n\t\r\n\t// takes in the square number of the square being moved to,\r\n\t// the piece that's being moved\r\n\tupdatePiece(i, newPiece) {\r\n\t\tlet p = newPiece.updateLocation(i)\r\n\t\tthis.pieceList[i] = p\r\n\t\tthis.pieces[~~(i/8)][i%8] = p\r\n\t}\r\n\t\r\n\tselectPiece(i) {\r\n\t\tlet returned = this.copy()\r\n\t\treturned.pieceList[i].selected = true\r\n\t\treturned.selectedPiece = i\r\n\t\treturn returned\r\n\t}\r\n\t\r\n\tunselectPiece() {\r\n\t\tlet returned = this.copy()\r\n\t\tif (returned.selectedPiece) {\r\n\t\t\treturned.pieceList[returned.selectedPiece].selected = false\r\n\t\t}\r\n\t\treturn returned\r\n\t}\r\n\t\r\n\tkingUnderAttack(player) {\r\n\t\t\r\n\t\tlet king = this.getPlayerKing(player)\r\n\t\tlet opp = opponent(player)\r\n\t\tlet enemyPieces = this.getPiecesFromPlayer(opp)\r\n\t\tlet bcp = this.copy()\r\n\t\t\r\n\t\tlet attackers = enemyPieces.filter(function f(p) {\r\n\t\t\tif (includes(p.getMoveOptions(bcp), king.i)) {\r\n\t\t\t\t// console.log('in check')\r\n\t\t\t\t// console.log(king.i)\r\n\t\t\t\t// console.log(p.getMoveOptions(bcp))\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\r\n\t\t})\r\n\t\t// console.log('king')\r\n\t\t// console.log(king)\r\n\t\t\r\n\t\t// console.log('attackers')\r\n\t\t// console.log(attackers)\r\n\t\t\r\n\t\treturn attackers.length > 0\r\n\t}\r\n}\r\n\r\nexport class ChessPiece {\r\n\tconstructor(pieceRender, player, i) {\r\n\t\tthis.pieceRender = pieceRender\r\n\t\tthis.player = player\r\n\t\tthis.y = ~~(i / 8)\r\n\t\tthis.x = i % 8\r\n\t\tthis.i = i\r\n\t\tthis.moveFilters = []\r\n\t\tthis.complexMoveFilters = []\r\n\t\tthis.moveFilters.push(piece => piece.player != this.player)\r\n\t\tthis.setPieceUnicode('', '')\r\n\t\tthis.selected = false\r\n\t}\r\n\t\r\n\tcopy() {\r\n\t\treturn new ChessPiece(this.pieceRender, this.player, this.i);\r\n\t}\r\n\t\r\n\tsetPieceUnicode(white, black) {\r\n\t\tif (this.player == players.PLAYER_1) {\r\n\t\t\tthis.pieceUnicode = white\r\n\t\t} else if (this.player == players.PLAYER_2) {\r\n\t\t\tthis.pieceUnicode = black\r\n\t\t} else {\r\n\t\t\tthis.pieceUnicode = ''\r\n\t\t}\r\n\t}\r\n\t\r\n\t// returns all legal moves the piece can make\r\n\tgetAllLegalMoves(board) {\r\n\t\t// get i locations of all possible moves, ignoring check\r\n\t\tlet moveOptions = this.getMoveOptions(board)\r\n\t\tlet i1 = this.i\r\n\t\tlet p1 = this.player\r\n\t\t// console.log('move options')\r\n\t\t// console.log(moveOptions)\r\n\t\treturn moveOptions.filter(function f(opt){\r\n\t\t\tlet futureBoardState = board.pieceMove(i1, opt)\r\n\t\t\treturn !(futureBoardState.kingUnderAttack(p1))\r\n\t\t})\r\n\t\t\r\n\t}\r\n\t\r\n\t// returns all squares the piece can move to - ignoring the idea of being in check\r\n\tgetMoveOptions(board) {\r\n\t\tlet allMoves = this.getRangeOfMotion()\r\n\t\tlet allPieces = allMoves.map(move => board.getPieceXY(move[0], move[1]))\r\n\t\tlet returned = []\r\n\t\tfor (const p of allPieces) {\r\n\t\t\t \r\n\t\t\tif (this.applyMoveFilters(p) && this.applyMoveFilters(p, board)) {\r\n\t\t\t\treturned.push(p.i)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\treturn returned\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tapplyMoveFilters(piece, board=null) {\r\n\t\tlet through = board ? this.complexMoveFilters : this.moveFilters\r\n\t\tfor (const filter of through) {\r\n\t\t\tif (!filter(piece, board)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\treturn []\r\n\t}\r\n\t\r\n\thasLegalMove(board) {\r\n\t\t// console.log('all legal moves')\r\n\t\t// console.log(this.getAllLegalMoves(board))\r\n\t\treturn this.getAllLegalMoves(board).length > 0;\r\n\t}\r\n\t\r\n\tisLegalMove(i, board) {\r\n\t\tlet result = this.getAllLegalMoves(board).filter(x => x == i);\t\t\r\n\t\treturn result.length == 1\r\n\t}\r\n\t\r\n\tupdateLocation(i) {\r\n\t\tlet newPiece = this.copy()\r\n\t\tnewPiece.y = ~~(i / 8)\r\n\t\tnewPiece.x = i % 8\r\n\t\tnewPiece.i = i\r\n\t\treturn newPiece\r\n\t}\r\n\t\r\n\tmoveIsOnBoard(candidates) {\r\n\t\treturn candidates.filter(x => (0 <= x[0]) && (8 > x[0]) && (0 <= x[1]) && (8 > x[1]))\r\n\t}\r\n}\r\n\r\nexport class King extends ChessPiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.KING, player, i)\r\n\t\tthis.setPieceUnicode('\\u2654', '\\u265A')\r\n\t}\r\n\t\r\n\tcopy() {\r\n\t\treturn new King(this.player, this.i)\r\n\t}\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\t\r\n\t\tlet candidates = [[-1, -1], [-1, 0], [-1, 1], \r\n\t\t\t\t[0, -1],  [0, 1],\r\n\t\t\t\t[1, -1],  [1, 0],  [1, 1]]\r\n\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\r\n\t\treturn this.moveIsOnBoard(candidates)\r\n\t}\r\n\t\r\n\tgetAllLegalMoves(board) {\r\n\t\t\r\n\t\tlet normalOpts = super.getAllLegalMoves(board)\r\n\t\tlet kingside = this.checkCastles(board, 'kingside')\r\n\t\tlet queenside = this.checkCastles(board, 'queenside')\r\n\t\tif (kingside) {\r\n\t\t\tnormalOpts.push(kingside)\r\n\t\t}\r\n\t\tif (queenside) {\r\n\t\t\tnormalOpts.push(queenside)\r\n\t\t}\r\n\t\treturn normalOpts\r\n\t}\r\n\t\r\n\tcheckCastles(board, side) {\r\n\t\tlet relevantSquares = this.genCastleSquares(side)\r\n\t\tif (board.castled[this.player]) {\r\n\t\t\treturn null\r\n\t\t}\r\n\t\tif (!(this.checkPiecePlacement(board, relevantSquares))) {\r\n\t\t\treturn null\r\n\t\t}\r\n\t\tif (!(this.checkMiddlePieces(board, relevantSquares))) {\r\n\t\t\treturn null\r\n\t\t}\r\n\t\tif (!(this.checkSafeSquares(board, relevantSquares))) {\r\n\t\t\treturn null\r\n\t\t}\r\n\t\treturn relevantSquares[2]\r\n\t}\r\n\t\r\n\tcheckSafeSquares(board, relevantSquares) {\r\n\t\tlet checkSquares = relevantSquares.slice(1, 3)\r\n\t\tconsole.log('check squares')\r\n\t\tconsole.log(checkSquares)\r\n\t\tlet i1 = this.i\r\n\t\tlet p1 = this.player\r\n\t\t\r\n\t\tlet inCheck = board.kingUnderAttack(p1)\r\n\t\t// // let otherCheck = board.pieceMove(this.i, checkSquares[1]).kingUnderAttack(p1)\r\n\t\t// return (! inCheck) && (! otherCheck)\r\n\t\t\r\n\t\tlet unsafeSquares = checkSquares.filter(function f(opt){\r\n\t\t\tlet futureBoardState = board.pieceMove(i1, opt)\r\n\t\t\treturn futureBoardState.kingUnderAttack(p1)\r\n\t\t})\r\n\t\treturn (! inCheck) && (unsafeSquares.length == 0)\r\n\t}\r\n\t\r\n\tcheckMiddlePieces(board, relevantSquares) {\r\n\t\tlet middleSquares = relevantSquares.slice(1, relevantSquares.length - 1)\r\n\t\tlet filtered = middleSquares.filter(function f(i) {\r\n\t\t\tlet pieceNotEmpty = board.getPiece(i).player != players.NONE\r\n\t\t\treturn pieceNotEmpty\r\n\t\t})\r\n\t\treturn filtered.length == 0\r\n\t}\r\n\t\r\n\tcheckPiecePlacement(board, relevantSquares) {\r\n\t\tlet rook = board.getPiece(relevantSquares[relevantSquares.length - 1])\r\n\t\tlet king = board.getPiece(relevantSquares[0])\r\n\t\treturn (rook.pieceRender == pieceRenders.ROOK) && (rook.player == this.player) &&\r\n\t\t\t\t(king.pieceRender == pieceRenders.KING) && (king.player == this.player)\r\n\t}\r\n\t\r\n\tgenCastleSquares(side) {\r\n\t\tlet kingBlackSquares = [4, 5, 6, 7]\r\n\t\tlet kingWhiteSquares = [60, 61, 62, 63]\r\n\t\tlet queenBlackSquares = [4, 3, 2, 1, 0]\r\n\t\tlet queenWhiteSquares = [60, 59, 58, 57, 56]\r\n\t\tif ((side == 'kingside') && (this.player == players.PLAYER_2)) {return kingBlackSquares}\r\n\t\tif ((side == 'kingside') && (this.player == players.PLAYER_1)) {return kingWhiteSquares}\r\n\t\tif ((side == 'queenside') && (this.player == players.PLAYER_2)) {return queenBlackSquares}\r\n\t\tif ((side == 'queenside') && (this.player == players.PLAYER_1)) {return queenWhiteSquares}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\nexport class Knight extends ChessPiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.KNIGHT, player, i)\r\n\t\tthis.setPieceUnicode('\\u2658', '\\u265E')\r\n\t}\r\n\t\r\n\tcopy() {\r\n\t\treturn new Knight(this.player, this.i)\r\n\t}\r\n\t\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\tlet candidates = [[-2, -1], [-2, 1], [-1, -2], [-1, 2], \r\n\t\t\t\t[1, -2],  [1, 2],  [2, -1],  [2, 1]]\r\n\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\t\r\n\t\treturn this.moveIsOnBoard(candidates)\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\nexport class Pawn extends ChessPiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.PAWN, player, i)\r\n\t\tthis.moveFilters.push(this.checkTaking())\r\n\t\tthis.complexMoveFilters.push(this.checkMove2())\r\n\t\tthis.setPieceUnicode('\\u2659', '\\u265F')\r\n\t}\r\n\t\r\n\tcopy() {\r\n\t\treturn new Pawn(this.player, this.i)\r\n\t}\r\n\t\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\tlet opts = []\r\n\t\tif (this.player == players.PLAYER_1) {\r\n\t\t\topts = [[0, -1], [0, -2], [-1, -1], [1, -1]]\r\n\t\t} else {\r\n\t\t\topts = [[0, 1], [0, 2], [-1, 1], [1, 1]]\r\n\t\t}\r\n\t\topts = opts.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\treturn this.moveIsOnBoard(opts)\r\n\t}\r\n\t\r\n\tcheckTaking() {\r\n\t\tlet thisX = this.x\r\n\t\tlet thisPlayer = this.player\r\n\t\treturn function returned(piece, board) {\r\n\t\t\t\r\n\t\t\tif (Math.abs(piece.x - thisX) == 1) {\r\n\t\t\t\treturn piece.player == opponent(thisPlayer)\r\n\t\t\t} else if (piece.x == thisX) {\r\n\t\t\t\treturn piece.player == players.NONE\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tcheckMove2() {\r\n\t\tlet thisY = this.y\r\n\t\tlet thisX = this.x\r\n\t\tlet thisPlayer = this.player\r\n\t\treturn function returned(piece, board) {\r\n\t\t\tif (Math.abs(thisY - piece.y) == 1) {\r\n\t\t\t\treturn true\r\n\t\t\t} \r\n\t\t\telse if (Math.abs(thisY - piece.y) == 2) {\r\n\t\t\t\t\r\n\t\t\t\tif (thisPlayer == players.PLAYER_1) {\r\n\t\t\t\t\tlet between = board.getPieceXY(thisX, 5)\r\n\t\t\t\t\treturn (thisY == 6) && between.player == players.NONE\r\n\t\t\t\t} \r\n\t\t\t\telse if (thisPlayer == players.PLAYER_2) {\r\n\t\t\t\t\tlet between = board.getPieceXY(thisX, 2)\r\n\t\t\t\t\treturn (thisY == 1) && between.player == players.NONE\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class RangePiece extends ChessPiece {\r\n\t\r\n\tgetMoveOptions(board) {\r\n\t\t\r\n\t\tlet returned = []\r\n\t\tlet allMoves = this.getRangeOfMotion()\r\n\t\t// console.log('candidates')\r\n\t\t// console.log(allMoves)\r\n\t\tfor (const moveSet of allMoves) {\r\n\t\t\tlet pieceSet = moveSet.map(move => board.getPieceXY(move[0], move[1]))\r\n\t\t\tlet toAdd = this.applyRangeMoveChecker(pieceSet)\r\n\t\t\t// console.log('toadd')\r\n\t\t\t// console.log(toAdd)\r\n\t\t\treturned = returned.concat(toAdd)\r\n\t\t}\r\n\t\t\t\t\r\n\t\t// console.log('All Move options')\r\n\t\t// console.log(returned)\r\n\t\treturn returned\r\n\t}\r\n\t\r\n\tapplyRangeMoveChecker(pieces) {\r\n\t\tlet done = false\r\n\t\tlet returned = []\r\n\t\tfor (const p of pieces) {\r\n\t\t\tif (p.player == this.player) {\r\n\t\t\t\t// console.log('a')\r\n\t\t\t\treturn returned\r\n\t\t\t}\r\n\t\t\telse if (p.player == players.NONE) {\r\n\t\t\t\treturned.push(p.i)\r\n\t\t\t\t// console.log('b')\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturned.push(p.i)\r\n\t\t\t\t// console.log('c')\r\n\t\t\t\treturn returned\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn returned\r\n\t} \r\n}\r\n\r\nexport class Rook extends RangePiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.ROOK, player, i)\r\n\t\tthis.setPieceUnicode('\\u2656', '\\u265C')\r\n\t}\r\n\tcopy() {\r\n\t\treturn new Rook(this.player, this.i)\r\n\t}\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\tlet returned = []\r\n\t\tlet down = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [0, x+1])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\tlet up = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [0, -1-x])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\t\t\r\n\t\tlet right = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [x+1, 0])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\r\n\t\tlet left = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [-1-x, 0])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\t\t\r\n\t\treturned.push(this.moveIsOnBoard(down))\r\n\t\treturned.push(this.moveIsOnBoard(up))\r\n\t\treturned.push(this.moveIsOnBoard(right))\r\n\t\treturned.push(this.moveIsOnBoard(left))\r\n\t\t\r\n\t\r\n\t\treturn returned\r\n\t}\r\n}\r\n\r\nexport class Bishop extends RangePiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.BISHOP, player, i)\r\n\t\tthis.setPieceUnicode('\\u2657', '\\u265D')\r\n\t}\r\n\tcopy() {\r\n\t\treturn new Bishop(this.player, this.i)\r\n\t}\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\tlet returned = []\r\n\t\tlet upr = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [x+1, -x-1])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\tlet upl = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [-x-1, -x-1])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\tlet downr = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [x+1, x+1])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\tlet downl = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [-x-1, x+1])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\t\t\r\n\t\treturned.push(this.moveIsOnBoard(upr))\r\n\t\treturned.push(this.moveIsOnBoard(upl))\r\n\t\treturned.push(this.moveIsOnBoard(downr))\r\n\t\treturned.push(this.moveIsOnBoard(downl))\r\n\t\t\r\n\t\treturn returned\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport class Queen extends RangePiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.QUEEN, player, i)\r\n\t\tthis.setPieceUnicode('\\u2655', '\\u265B')\r\n\t}\r\n\tcopy() {\r\n\t\treturn new Queen(this.player, this.i)\r\n\t}\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\tlet diag = (new Bishop(this.player, this.i)).getRangeOfMotion()\r\n\t\tlet straight = (new Rook(this.player, this.i)).getRangeOfMotion()\r\n\t\t\r\n\t\treturn diag.concat(straight)\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport class EmptyPiece extends ChessPiece {\r\n\tconstructor(i) {\r\n\t\tsuper(\r\n\t\t\tpieceRenders.NONE, \r\n\t\t\tplayers.NONE,  \r\n\t\t\ti\r\n\t\t)\r\n\t}\r\n}\r\n\r\n \r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {ChessBoard, King, Knight, Pawn, Rook, Bishop, Queen, pieceRenders, players, opponent, ChessPiece, EmptyPiece} from './game-components';\r\n\r\n\r\n\r\n// \r\nconst initBlackPieces = [\r\n\tnew Rook(players.PLAYER_2, 0),\r\n\tnew Knight(players.PLAYER_2, 1),\r\n\tnew Bishop(players.PLAYER_2, 2),\r\n\tnew Queen(players.PLAYER_2, 3),\r\n\tnew King(players.PLAYER_2, 4),\r\n\tnew Bishop(players.PLAYER_2, 5),\r\n\tnew Knight(players.PLAYER_2, 6),\r\n\tnew Rook(players.PLAYER_2, 7),\r\n\t\r\n\tnew Pawn(players.PLAYER_2, 8),\r\n\tnew Pawn(players.PLAYER_2, 9),\r\n\tnew Pawn(players.PLAYER_2, 10),\r\n\tnew Pawn(players.PLAYER_2, 11),\r\n\tnew Pawn(players.PLAYER_2, 12),\r\n\tnew Pawn(players.PLAYER_2, 13),\r\n\tnew Pawn(players.PLAYER_2, 14),\r\n\tnew Pawn(players.PLAYER_2, 15)\r\n\t\r\n]\r\n\r\nconst emptySquares = [...Array(48-16).keys()].map(x => x+16).map(y => new EmptyPiece(y))\r\n\r\nconst initWhitePieces = [\r\n\tnew Pawn(players.PLAYER_1, 48),\r\n\tnew Pawn(players.PLAYER_1, 49),\r\n\tnew Pawn(players.PLAYER_1, 50),\r\n\tnew Pawn(players.PLAYER_1, 51),\r\n\tnew Pawn(players.PLAYER_1, 52),\r\n\tnew Pawn(players.PLAYER_1, 53),\r\n\tnew Pawn(players.PLAYER_1, 54),\r\n\tnew Pawn(players.PLAYER_1, 55),\r\n\t\r\n\t\r\n\tnew Rook(players.PLAYER_1, 56),\r\n\tnew Knight(players.PLAYER_1, 57),\r\n\tnew Bishop(players.PLAYER_1, 58),\r\n\tnew Queen(players.PLAYER_1, 59),\r\n\tnew King(players.PLAYER_1, 60),\r\n\tnew Bishop(players.PLAYER_1, 61),\r\n\tnew Knight(players.PLAYER_1, 62),\r\n\tnew Rook(players.PLAYER_1, 63),\r\n]\r\n\t\r\n// const [a, setA] = useState()\r\n\r\n\t\r\nconst initBoard = new ChessBoard(initBlackPieces.concat(emptySquares).concat(initWhitePieces))\r\n\r\n\r\n\r\nfunction Square(props) {\r\n\tlet sel = \"\"\r\n\tif (props.piece.selected) {\r\n\t\tsel = \" selected\"\r\n\t}\r\n\tlet squareColor = \"lightSquare\"\r\n\tif ((Math.floor(props.piece.i / 8) % 2) == (props.piece.i % 2)){\r\n\t\tsquareColor = \"darkSquare\"\r\n\t}\r\n\tlet cn = squareColor + \" \" + sel\r\n\treturn (\r\n\t\t<button className={cn} onClick={props.onClick}>\r\n\t\t\t{props.piece.pieceUnicode}\r\n\t\t</button>\r\n\t)\r\n\t\r\n}\r\n\r\nclass RenderPiece {\r\n\tconstructor(piece) {\r\n\t\tthis.pieceRender = piece.pieceRender\r\n\t\tthis.player = piece.player\r\n\t}\r\n}\r\n\r\nclass Board extends React.Component {\r\n\t\r\n\trenderSquare(i) {\r\n\t\treturn <Square \r\n\t\t\t\t\tpiece={this.props.squares[i]}\r\n\t\t\t\t\tonClick={() => this.props.onClick(i)}\r\n\t\t\t\t/>\r\n\t}\r\n\t\r\n\trenderRow(rn) {\r\n\t\treturn <div className=\"board-row\">\r\n\t\t\t{this.renderSquare(rn*8 + 0)}\r\n\t\t\t{this.renderSquare(rn*8 + 1)}\r\n\t\t\t{this.renderSquare(rn*8 + 2)}\r\n\t\t\t{this.renderSquare(rn*8 + 3)}\r\n\t\t\t{this.renderSquare(rn*8 + 4)}\r\n\t\t\t{this.renderSquare(rn*8 + 5)}\r\n\t\t\t{this.renderSquare(rn*8 + 6)}\r\n\t\t\t{this.renderSquare(rn*8 + 7)}\r\n\t\t</div>\r\n\t}\r\n\r\n\trender() {\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.renderRow(0)}\r\n\t\t\t\t{this.renderRow(1)}\r\n\t\t\t\t{this.renderRow(2)}\r\n\t\t\t\t{this.renderRow(3)}\r\n\t\t\t\t{this.renderRow(4)}\r\n\t\t\t\t{this.renderRow(5)}\r\n\t\t\t\t{this.renderRow(6)}\r\n\t\t\t\t{this.renderRow(7)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass Game extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\thistory: [{\r\n\t\t\t\tsquares: initBoard\r\n\t\t\t}],\r\n\t\t\tplayerTurn: players.PLAYER_1,\r\n\t\t\tmoveNumber: 0,\r\n\t\t\tmoveStage: \"readyToSelect\",\r\n\t\t\tpieceSelected: null\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t}\r\n\t\r\n\thandleClick(i) {\r\n\t\tif (this.state.moveStage === \"readyToSelect\") {\r\n\t\t\treturn this.handlePieceSelect(i);\r\n\t\t} else {\r\n\t\t\treturn this.handlePieceMove(i);\r\n\t\t}\r\n\t}\r\n\t\r\n\thandlePieceSelect(i) {\r\n\t\tconst hist = this.state.history.slice(0, this.state.moveNumber + 1);\r\n\t\tconst current = hist[this.state.moveNumber];\r\n\t\tconst squares = current.squares.copy();\r\n\t\tconst pieceSelected = squares.getPiece(i);\r\n\t\t\r\n\t\tif (! (this.state.playerTurn === pieceSelected.player)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (! (pieceSelected.hasLegalMove(squares.copy()))) {\r\n\t\t\tconsole.log('no move')\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet newSquares = squares.selectPiece(i)\r\n\t\thist[this.state.moveNumber].squares = newSquares\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\thistory: hist,\r\n\t\t\tmoveStage: \"readyToMove\",\r\n\t\t\tpieceSelected: pieceSelected.copy()\r\n\t\t\t\r\n\t\t})\r\n\t}\r\n\t\r\n\thandlePieceMove(i) {\r\n\t\tconst hist = this.state.history.slice(0, this.state.moveNumber + 1);\r\n\t\tconst current = hist[hist.length - 1];\r\n\t\tlet squares = current.squares.copy();\r\n\t\tlet new_square = squares.getPiece(i);\r\n\t\t\r\n\t\tif (! (this.state.pieceSelected.isLegalMove(i, squares.copy()))) {\r\n\t\t\tconsole.log('fire');\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet updatedSquares = squares.unselectPiece()\r\n\t\thist[hist.length - 1].squares = updatedSquares\r\n\t\tlet sel = this.state.pieceSelected.copy();\r\n\t\tsquares = this.handleKingMove(squares, sel.i, i)\r\n\t\tsquares = squares.pieceMove(sel.i, i)\r\n\t\t\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\thistory: hist.concat([{\r\n\t\t\t\tsquares: squares\r\n\t\t\t}]),\r\n\t\t\t\r\n\t\t\tmoveStage: \"readyToSelect\",\r\n\t\t\tpieceSelected: null,\r\n\t\t\tplayerTurn: this.state.playerTurn === players.PLAYER_1 ? players.PLAYER_2 : players.PLAYER_1,\r\n\t\t\tmoveNumber: hist.length\r\n\t\t});\r\n\t\t// console.log(.blackPieces)\r\n\t}\r\n\t\r\n\thandleKingMove(squares, startLoc, endLoc) {\r\n\t\tlet startPiece = squares.getPiece(startLoc)\r\n\t\tlet endPiece = squares.getPiece(endLoc)\r\n\t\t\r\n\t\tif (startPiece.pieceRender == pieceRenders.KING) {\r\n\t\t\tconsole.log('a')\r\n\t\t\tif (Math.abs(startPiece.x - endPiece.x) == 2) {\r\n\t\t\t\tlet returned;\r\n\t\t\t\tif (startPiece.x > endPiece.x) {\r\n\t\t\t\t\tlet rookI = endPiece.i - 2\r\n\t\t\t\t\treturned = squares.pieceMove(rookI, rookI + 3)\r\n\t\t\t\t\treturned.castled[startPiece.player] = true\r\n\t\t\t\t}\r\n\t\t\t\telse if (startPiece.x < endPiece.x) {\r\n\t\t\t\t\tlet rookI = endPiece.i + 1\r\n\t\t\t\t\tconsole.log('rooki')\r\n\t\t\t\t\tconsole.log(rookI)\r\n\t\t\t\t\treturned = squares.pieceMove(rookI, rookI - 2)\r\n\t\t\t\t\treturned.castled[startPiece.player] = true\r\n\t\t\t\t}\r\n\t\t\t\treturn returned\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet returned = squares.copy()\r\n\t\t\t\treturned.castled[startPiece.player] = true\r\n\t\t\t\treturn returned\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn squares\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tjumpTo(step) {\r\n\t\tthis.setState({\r\n\t\t\tmoveNumber: step,\r\n\t\t\tmoveStage: \"readyToSelect\",\r\n\t\t\tpieceSelected: null,\r\n\t\t\tplayerTurn: (step % 2) == 0 ? players.PLAYER_1 : players.PLAYER_2\r\n\t\t});\r\n\t}\t\t\r\n\t\r\n\trender() {\r\n\t\t\r\n\t\tconst history = this.state.history\r\n\t\tconst current = history[this.state.moveNumber]\r\n\t\tconst calcWinner = calculateWinner(this.state.playerTurn, current.squares);\r\n\t\t\r\n\t\tconst moves = history.map((step, move) => {\r\n\t\t\tconst desc = move ?\r\n\t\t\t\t'Go to move #' + move : \r\n\t\t\t\t'Go to game start';\r\n\t\t\t\r\n\t\t\treturn (\r\n\t\t\t\t<li key={move}>\r\n\t\t\t\t\t<button onClick={() => this.jumpTo(move)}> {desc} \r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\t\t});\r\n\t\t\r\n\t\tlet status;\r\n\t\tif(calcWinner) {\r\n\t\t\tif (calcWinner == players.NONE) {\r\n\t\t\t\tstatus = \"Stalemate\"\r\n\t\t\t} else {\r\n\t\t\t\tstatus = 'Winner: ' + calcWinner;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tstatus = (this.state.playerTurn == players.PLAYER_1 ? 'White' : 'Black') + \"'s turn\";\r\n\t\t}\r\n\t\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t<div className=\"game-board\">\r\n\t\t\t\t<Board \r\n\t\t\t\tsquares={current.squares.pieceList}\r\n\t\t\t\tonClick={i => this.handleClick(i)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"game-info\">\r\n\t\t\t\t<div>{status}</div>\r\n\t\t\t\t<ol>{moves}</ol>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// <div className=\"container\">\r\n\t\t\t\t\t// <BoardSquare\r\n\t\t\t\t\t// color=\"light\"\r\n\t\t\t\t\t// />\r\n\t\t\t\t\t// <Square \r\n\t\t\t\t\t\t// piece={new King(players.PLAYER_2, 1)}\r\n\t\t\t\t\t\t// onClick={() => 1}\r\n\t\t\t\t\t// />\r\n\t\t\t\t// </div>\r\n\r\nfunction calculateWinner(playerTurn, squares) {\r\n  \r\n\tlet kingUnderAttack = squares.kingUnderAttack(playerTurn)\r\n\tlet canMove = squares.playerCanMove(playerTurn)\r\n\tif ((! (canMove)) && kingUnderAttack) {\r\n\t\treturn opponent(playerTurn)\r\n\t}\r\n\telse if (!(canMove) ) {\r\n\t\treturn players.NONE\r\n\t}\r\n\telse {\r\n\t\treturn null\r\n\t}\r\n\t\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}