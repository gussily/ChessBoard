{"version":3,"sources":["game-components.js","index.js"],"names":["pieceRenders","opponent","player","players","PLAYER_1","PLAYER_2","NONE","ChessBoard","pieceList","sel","castled","this","pieces","genPieces","selectedPiece","handleCastled","map","x","copy","player1","player2","filter","pieceRender","Array","keys","y","i","getPiece","origLoc","newLoc","cp","updatePiece","EmptyPiece","handleQueening","piece","yNeeded","Queen","newPiece","p","updateLocation","returned","selected","king","getPlayerKing","opp","enemyPieces","getPiecesFromPlayer","bcp","a","getMoveOptions","v","indexOf","length","ChessPiece","moveFilters","complexMoveFilters","push","setPieceUnicode","white","black","pieceUnicode","board","moveOptions","i1","p1","opt","pieceMove","kingUnderAttack","allPieces","getRangeOfMotion","move","getPieceXY","applyMoveFilters","through","getAllLegalMoves","candidates","King","moveIsOnBoard","normalOpts","kingside","checkCastles","queenside","side","relevantSquares","genCastleSquares","checkPiecePlacement","checkMiddlePieces","checkSafeSquares","checkSquares","slice","console","log","inCheck","unsafeSquares","rook","Knight","Pawn","checkTaking","checkMove2","opts","thisX","thisPlayer","Math","abs","thisY","between","RangePiece","allMoves","pieceSet","toAdd","applyRangeMoveChecker","concat","Rook","down","up","right","left","Bishop","upr","upl","downr","downl","diag","straight","initBlackPieces","emptySquares","initWhitePieces","initBoard","Square","props","squareColor","floor","cn","className","onClick","Board","squares","rn","renderSquare","renderRow","React","Component","Game","state","history","playerTurn","moveNumber","moveStage","pieceSelected","handlePieceSelect","handlePieceMove","hist","hasLegalMove","newSquares","selectPiece","setState","isLegalMove","updatedSquares","unselectPiece","handleKingMove","startLoc","endLoc","startPiece","endPiece","rookI","step","status","current","calcWinner","moves","desc","jumpTo","xIsNext","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6ee6acb.chunk.js","sourcesContent":["\r\nexport const pieceRenders = {\r\n\tKING: '\\u2654',\r\n\tQUEEN: 'Q', \r\n\tROOK: 'R',\r\n\tBISHOP: 'B',\r\n\tKNIGHT: 'N',\r\n\tPAWN: 'P',\r\n\tNONE: ''\r\n}\r\n\r\nexport const includes = (a, v) => a.indexOf(v) !== -1\r\nexport function opponent(player) {\r\n\tif (player == players.PLAYER_1) {\r\n\t\treturn players.PLAYER_2\r\n\t}\r\n\telse if (player == players.PLAYER_2) {\r\n\t\treturn players.PLAYER_1\r\n\t}\r\n}\r\n\r\nexport const players = {\r\n\tPLAYER_1: 'white',\r\n\tPLAYER_2: 'black',\r\n\tNONE: 'empty'\r\n}\r\n\r\nexport class ChessBoard {\r\n\tconstructor(pieceList, sel=null, castled=null) {\r\n\t\tthis.pieces = this.genPieces(pieceList)\r\n\t\tthis.pieceList = pieceList\r\n\t\tthis.selectedPiece = sel\r\n\t\tthis.handleCastled(castled)\r\n\t}\r\n\t\r\n\tcopy() {\r\n\t\treturn new ChessBoard(this.pieceList.map(x => x.copy()), this.selectedPiece, this.castled)\r\n\t}\r\n\t\r\n\thandleCastled(castled) {\r\n\t\tif (castled) {\r\n\t\t\tthis.castled = castled\r\n\t\t} else {\r\n\t\t\tlet player1 = players.PLAYER_1\r\n\t\t\tlet player2 = players.PLAYER_2\r\n\t\t\t\r\n\t\t\tthis.castled = {player1: false, player2: false}\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetPiecesFromPlayer(player) {\r\n\t\tlet pieces = this.pieceList.filter(x => x.player == player)\r\n\t\treturn pieces\r\n\t}\r\n\t\r\n\tgetPlayerKing(player) {\r\n\t\treturn this.pieceList.filter(x => (x.player == player) && (x.pieceRender == pieceRenders.KING))[0]\r\n\t}\r\n\t\r\n\tgenPieces(pieceList) {\r\n\t\t\r\n\t\treturn [...Array(8).keys()]\r\n\t\t\t.map(\r\n\t\t\t\ty => [...Array(8).keys()]\r\n\t\t\t\t\t.map(x => pieceList[8 * y + x])\r\n\t\t\t)\r\n\t}\r\n\t\r\n\tgetPiece(i) {\r\n\t\treturn this.pieceList[i]\r\n\t}\r\n\t\r\n\tgetPieceXY(x, y) {\r\n\t\treturn this.getPiece(y * 8 + x)\r\n\t}\r\n\t\r\n\tpieceMove(origLoc, newLoc) {\r\n\t\tlet cp = this.copy()\r\n\t\tcp.updatePiece(newLoc, cp.getPiece(origLoc));\r\n\t\tcp.updatePiece(origLoc, new EmptyPiece(origLoc));\r\n\t\tcp.handleQueening(newLoc)\r\n\t\treturn cp\r\n\t}\r\n\t\r\n\thandleQueening(newLoc) {\r\n\t\tlet piece = this.getPiece(newLoc)\r\n\t\tlet yNeeded = piece.player == players.PLAYER_1 ? 0 : 7\r\n\t\tif ((piece.pieceRender == pieceRenders.PAWN) &&\r\n\t\t\t(piece.y == yNeeded)) {\r\n\t\t\tthis.updatePiece(newLoc, new Queen(piece.player, newLoc))\r\n\t\t}\r\n\t}\r\n\t\r\n\t// takes in the square number of the square being moved to,\r\n\t// the piece that's being moved\r\n\tupdatePiece(i, newPiece) {\r\n\t\tlet p = newPiece.updateLocation(i)\r\n\t\tthis.pieceList[i] = p\r\n\t\tthis.pieces[~~(i/8)][i%8] = p\r\n\t}\r\n\t\r\n\tselectPiece(i) {\r\n\t\tlet returned = this.copy()\r\n\t\treturned.pieceList[i].selected = true\r\n\t\treturned.selectedPiece = i\r\n\t\treturn returned\r\n\t}\r\n\t\r\n\tunselectPiece() {\r\n\t\tlet returned = this.copy()\r\n\t\tif (returned.selectedPiece) {\r\n\t\t\treturned.pieceList[returned.selectedPiece].selected = false\r\n\t\t}\r\n\t\treturn returned\r\n\t}\r\n\t\r\n\tkingUnderAttack(player) {\r\n\t\t\r\n\t\tlet king = this.getPlayerKing(player)\r\n\t\tlet opp = opponent(player)\r\n\t\tlet enemyPieces = this.getPiecesFromPlayer(opp)\r\n\t\tlet bcp = this.copy()\r\n\t\t\r\n\t\tlet attackers = enemyPieces.filter(function f(p) {\r\n\t\t\tif (includes(p.getMoveOptions(bcp), king.i)) {\r\n\t\t\t\t// console.log('in check')\r\n\t\t\t\t// console.log(king.i)\r\n\t\t\t\t// console.log(p.getMoveOptions(bcp))\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\r\n\t\t})\r\n\t\t// console.log('king')\r\n\t\t// console.log(king)\r\n\t\t\r\n\t\t// console.log('attackers')\r\n\t\t// console.log(attackers)\r\n\t\t\r\n\t\treturn attackers.length > 0\r\n\t}\r\n}\r\n\r\nexport class ChessPiece {\r\n\tconstructor(pieceRender, player, i) {\r\n\t\tthis.pieceRender = pieceRender\r\n\t\tthis.player = player\r\n\t\tthis.y = ~~(i / 8)\r\n\t\tthis.x = i % 8\r\n\t\tthis.i = i\r\n\t\tthis.moveFilters = []\r\n\t\tthis.complexMoveFilters = []\r\n\t\tthis.moveFilters.push(piece => piece.player != this.player)\r\n\t\tthis.setPieceUnicode('', '')\r\n\t\tthis.selected = false\r\n\t}\r\n\t\r\n\tcopy() {\r\n\t\treturn new ChessPiece(this.pieceRender, this.player, this.i);\r\n\t}\r\n\t\r\n\tsetPieceUnicode(white, black) {\r\n\t\tif (this.player == players.PLAYER_1) {\r\n\t\t\tthis.pieceUnicode = white\r\n\t\t} else if (this.player == players.PLAYER_2) {\r\n\t\t\tthis.pieceUnicode = black\r\n\t\t} else {\r\n\t\t\tthis.pieceUnicode = ''\r\n\t\t}\r\n\t}\r\n\t\r\n\t// returns all legal moves the piece can make\r\n\tgetAllLegalMoves(board) {\r\n\t\t// get i locations of all possible moves, ignoring check\r\n\t\tlet moveOptions = this.getMoveOptions(board)\r\n\t\tlet i1 = this.i\r\n\t\tlet p1 = this.player\r\n\t\t// console.log('move options')\r\n\t\t// console.log(moveOptions)\r\n\t\treturn moveOptions.filter(function f(opt){\r\n\t\t\tlet futureBoardState = board.pieceMove(i1, opt)\r\n\t\t\treturn !(futureBoardState.kingUnderAttack(p1))\r\n\t\t})\r\n\t\t\r\n\t}\r\n\t\r\n\t// returns all squares the piece can move to - ignoring the idea of being in check\r\n\tgetMoveOptions(board) {\r\n\t\tlet allMoves = this.getRangeOfMotion()\r\n\t\tlet allPieces = allMoves.map(move => board.getPieceXY(move[0], move[1]))\r\n\t\tlet returned = []\r\n\t\tfor (const p of allPieces) {\r\n\t\t\t \r\n\t\t\tif (this.applyMoveFilters(p) && this.applyMoveFilters(p, board)) {\r\n\t\t\t\treturned.push(p.i)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\treturn returned\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tapplyMoveFilters(piece, board=null) {\r\n\t\tlet through = board ? this.complexMoveFilters : this.moveFilters\r\n\t\tfor (const filter of through) {\r\n\t\t\tif (!filter(piece, board)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\treturn []\r\n\t}\r\n\t\r\n\thasLegalMove(board) {\r\n\t\t// console.log('all legal moves')\r\n\t\t// console.log(this.getAllLegalMoves(board))\r\n\t\treturn this.getAllLegalMoves(board).length > 0;\r\n\t}\r\n\t\r\n\tisLegalMove(i, board) {\r\n\t\tlet result = this.getAllLegalMoves(board).filter(x => x == i);\t\t\r\n\t\treturn result.length == 1\r\n\t}\r\n\t\r\n\tupdateLocation(i) {\r\n\t\tlet newPiece = this.copy()\r\n\t\tnewPiece.y = ~~(i / 8)\r\n\t\tnewPiece.x = i % 8\r\n\t\tnewPiece.i = i\r\n\t\treturn newPiece\r\n\t}\r\n\t\r\n\tmoveIsOnBoard(candidates) {\r\n\t\treturn candidates.filter(x => (0 <= x[0]) && (8 > x[0]) && (0 <= x[1]) && (8 > x[1]))\r\n\t}\r\n}\r\n\r\nexport class King extends ChessPiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.KING, player, i)\r\n\t\tthis.setPieceUnicode('\\u2654', '\\u265A')\r\n\t}\r\n\t\r\n\tcopy() {\r\n\t\treturn new King(this.player, this.i)\r\n\t}\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\t\r\n\t\tlet candidates = [[-1, -1], [-1, 0], [-1, 1], \r\n\t\t\t\t[0, -1],  [0, 1],\r\n\t\t\t\t[1, -1],  [1, 0],  [1, 1]]\r\n\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\r\n\t\treturn this.moveIsOnBoard(candidates)\r\n\t}\r\n\t\r\n\tgetAllLegalMoves(board) {\r\n\t\t\r\n\t\tlet normalOpts = super.getAllLegalMoves(board)\r\n\t\tlet kingside = this.checkCastles(board, 'kingside')\r\n\t\tlet queenside = this.checkCastles(board, 'queenside')\r\n\t\tif (kingside) {\r\n\t\t\tnormalOpts.push(kingside)\r\n\t\t}\r\n\t\tif (queenside) {\r\n\t\t\tnormalOpts.push(queenside)\r\n\t\t}\r\n\t\treturn normalOpts\r\n\t}\r\n\t\r\n\tcheckCastles(board, side) {\r\n\t\tlet relevantSquares = this.genCastleSquares(side)\r\n\t\tif (board.castled[this.player]) {\r\n\t\t\treturn null\r\n\t\t}\r\n\t\tif (!(this.checkPiecePlacement(board, relevantSquares))) {\r\n\t\t\treturn null\r\n\t\t}\r\n\t\tif (!(this.checkMiddlePieces(board, relevantSquares))) {\r\n\t\t\treturn null\r\n\t\t}\r\n\t\tif (!(this.checkSafeSquares(board, relevantSquares))) {\r\n\t\t\treturn null\r\n\t\t}\r\n\t\treturn relevantSquares[2]\r\n\t}\r\n\t\r\n\tcheckSafeSquares(board, relevantSquares) {\r\n\t\tlet checkSquares = relevantSquares.slice(1, 3)\r\n\t\tconsole.log('check squares')\r\n\t\tconsole.log(checkSquares)\r\n\t\tlet i1 = this.i\r\n\t\tlet p1 = this.player\r\n\t\t\r\n\t\tlet inCheck = board.kingUnderAttack(p1)\r\n\t\t// // let otherCheck = board.pieceMove(this.i, checkSquares[1]).kingUnderAttack(p1)\r\n\t\t// return (! inCheck) && (! otherCheck)\r\n\t\t\r\n\t\tlet unsafeSquares = checkSquares.filter(function f(opt){\r\n\t\t\tlet futureBoardState = board.pieceMove(i1, opt)\r\n\t\t\treturn futureBoardState.kingUnderAttack(p1)\r\n\t\t})\r\n\t\treturn (! inCheck) && (unsafeSquares.length == 0)\r\n\t}\r\n\t\r\n\tcheckMiddlePieces(board, relevantSquares) {\r\n\t\tlet middleSquares = relevantSquares.slice(1, relevantSquares.length - 1)\r\n\t\tlet filtered = middleSquares.filter(function f(i) {\r\n\t\t\tlet pieceNotEmpty = board.getPiece(i).player != players.NONE\r\n\t\t\treturn pieceNotEmpty\r\n\t\t})\r\n\t\treturn filtered.length == 0\r\n\t}\r\n\t\r\n\tcheckPiecePlacement(board, relevantSquares) {\r\n\t\tlet rook = board.getPiece(relevantSquares[relevantSquares.length - 1])\r\n\t\tlet king = board.getPiece(relevantSquares[0])\r\n\t\treturn (rook.pieceRender == pieceRenders.ROOK) && (rook.player == this.player) &&\r\n\t\t\t\t(king.pieceRender == pieceRenders.KING) && (king.player == this.player)\r\n\t}\r\n\t\r\n\tgenCastleSquares(side) {\r\n\t\tlet kingBlackSquares = [4, 5, 6, 7]\r\n\t\tlet kingWhiteSquares = [60, 61, 62, 63]\r\n\t\tlet queenBlackSquares = [4, 3, 2, 1, 0]\r\n\t\tlet queenWhiteSquares = [60, 59, 58, 57, 56]\r\n\t\tif ((side == 'kingside') && (this.player == players.PLAYER_2)) {return kingBlackSquares}\r\n\t\tif ((side == 'kingside') && (this.player == players.PLAYER_1)) {return kingWhiteSquares}\r\n\t\tif ((side == 'queenside') && (this.player == players.PLAYER_2)) {return queenBlackSquares}\r\n\t\tif ((side == 'queenside') && (this.player == players.PLAYER_1)) {return queenWhiteSquares}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\nexport class Knight extends ChessPiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.KNIGHT, player, i)\r\n\t\tthis.setPieceUnicode('\\u2658', '\\u265E')\r\n\t}\r\n\t\r\n\tcopy() {\r\n\t\treturn new Knight(this.player, this.i)\r\n\t}\r\n\t\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\tlet candidates = [[-2, -1], [-2, 1], [-1, -2], [-1, 2], \r\n\t\t\t\t[1, -2],  [1, 2],  [2, -1],  [2, 1]]\r\n\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\t\r\n\t\treturn this.moveIsOnBoard(candidates)\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\nexport class Pawn extends ChessPiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.PAWN, player, i)\r\n\t\tthis.moveFilters.push(this.checkTaking())\r\n\t\tthis.complexMoveFilters.push(this.checkMove2())\r\n\t\tthis.setPieceUnicode('\\u2659', '\\u265F')\r\n\t}\r\n\t\r\n\tcopy() {\r\n\t\treturn new Pawn(this.player, this.i)\r\n\t}\r\n\t\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\tlet opts = []\r\n\t\tif (this.player == players.PLAYER_1) {\r\n\t\t\topts = [[0, -1], [0, -2], [-1, -1], [1, -1]]\r\n\t\t} else {\r\n\t\t\topts = [[0, 1], [0, 2], [-1, 1], [1, 1]]\r\n\t\t}\r\n\t\topts = opts.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\treturn this.moveIsOnBoard(opts)\r\n\t}\r\n\t\r\n\tcheckTaking() {\r\n\t\tlet thisX = this.x\r\n\t\tlet thisPlayer = this.player\r\n\t\treturn function returned(piece, board) {\r\n\t\t\t\r\n\t\t\tif (Math.abs(piece.x - thisX) == 1) {\r\n\t\t\t\treturn piece.player == opponent(thisPlayer)\r\n\t\t\t} else if (piece.x == thisX) {\r\n\t\t\t\treturn piece.player == players.NONE\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tcheckMove2() {\r\n\t\tlet thisY = this.y\r\n\t\tlet thisX = this.x\r\n\t\tlet thisPlayer = this.player\r\n\t\treturn function returned(piece, board) {\r\n\t\t\tif (Math.abs(thisY - piece.y) == 1) {\r\n\t\t\t\treturn true\r\n\t\t\t} \r\n\t\t\telse if (Math.abs(thisY - piece.y) == 2) {\r\n\t\t\t\t\r\n\t\t\t\tif (thisPlayer == players.PLAYER_1) {\r\n\t\t\t\t\tlet between = board.getPieceXY(thisX, 5)\r\n\t\t\t\t\treturn (thisY == 6) && between.player == players.NONE\r\n\t\t\t\t} \r\n\t\t\t\telse if (thisPlayer == players.PLAYER_2) {\r\n\t\t\t\t\tlet between = board.getPieceXY(thisX, 2)\r\n\t\t\t\t\treturn (thisY == 1) && between.player == players.NONE\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class RangePiece extends ChessPiece {\r\n\t\r\n\tgetMoveOptions(board) {\r\n\t\t\r\n\t\tlet returned = []\r\n\t\tlet allMoves = this.getRangeOfMotion()\r\n\t\t// console.log('candidates')\r\n\t\t// console.log(allMoves)\r\n\t\tfor (const moveSet of allMoves) {\r\n\t\t\tlet pieceSet = moveSet.map(move => board.getPieceXY(move[0], move[1]))\r\n\t\t\tlet toAdd = this.applyRangeMoveChecker(pieceSet)\r\n\t\t\t// console.log('toadd')\r\n\t\t\t// console.log(toAdd)\r\n\t\t\treturned = returned.concat(toAdd)\r\n\t\t}\r\n\t\t\t\t\r\n\t\t// console.log('All Move options')\r\n\t\t// console.log(returned)\r\n\t\treturn returned\r\n\t}\r\n\t\r\n\tapplyRangeMoveChecker(pieces) {\r\n\t\tlet done = false\r\n\t\tlet returned = []\r\n\t\tfor (const p of pieces) {\r\n\t\t\tif (p.player == this.player) {\r\n\t\t\t\t// console.log('a')\r\n\t\t\t\treturn returned\r\n\t\t\t}\r\n\t\t\telse if (p.player == players.NONE) {\r\n\t\t\t\treturned.push(p.i)\r\n\t\t\t\t// console.log('b')\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturned.push(p.i)\r\n\t\t\t\t// console.log('c')\r\n\t\t\t\treturn returned\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn returned\r\n\t} \r\n}\r\n\r\nexport class Rook extends RangePiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.ROOK, player, i)\r\n\t\tthis.setPieceUnicode('\\u2656', '\\u265C')\r\n\t}\r\n\tcopy() {\r\n\t\treturn new Rook(this.player, this.i)\r\n\t}\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\tlet returned = []\r\n\t\tlet down = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [0, x+1])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\tlet up = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [0, -1-x])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\t\t\r\n\t\tlet right = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [x+1, 0])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\r\n\t\tlet left = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [-1-x, 0])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\t\t\r\n\t\treturned.push(this.moveIsOnBoard(down))\r\n\t\treturned.push(this.moveIsOnBoard(up))\r\n\t\treturned.push(this.moveIsOnBoard(right))\r\n\t\treturned.push(this.moveIsOnBoard(left))\r\n\t\t\r\n\t\r\n\t\treturn returned\r\n\t}\r\n}\r\n\r\nexport class Bishop extends RangePiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.BISHOP, player, i)\r\n\t\tthis.setPieceUnicode('\\u2657', '\\u265D')\r\n\t}\r\n\tcopy() {\r\n\t\treturn new Bishop(this.player, this.i)\r\n\t}\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\tlet returned = []\r\n\t\tlet upr = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [x+1, -x-1])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\tlet upl = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [-x-1, -x-1])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\tlet downr = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [x+1, x+1])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\tlet downl = [...Array(7).keys()]\r\n\t\t\t\t.map(x => [-x-1, x+1])\r\n\t\t\t\t.map(x => [this.x + x[0], this.y + x[1]])\r\n\t\t\t\t\r\n\t\treturned.push(this.moveIsOnBoard(upr))\r\n\t\treturned.push(this.moveIsOnBoard(upl))\r\n\t\treturned.push(this.moveIsOnBoard(downr))\r\n\t\treturned.push(this.moveIsOnBoard(downl))\r\n\t\t\r\n\t\treturn returned\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport class Queen extends RangePiece {\r\n\tconstructor(player, i) {\r\n\t\tsuper(pieceRenders.QUEEN, player, i)\r\n\t\tthis.setPieceUnicode('\\u2655', '\\u265B')\r\n\t}\r\n\tcopy() {\r\n\t\treturn new Queen(this.player, this.i)\r\n\t}\r\n\t\r\n\tgetRangeOfMotion() {\r\n\t\tlet diag = (new Bishop(this.player, this.i)).getRangeOfMotion()\r\n\t\tlet straight = (new Rook(this.player, this.i)).getRangeOfMotion()\r\n\t\t\r\n\t\treturn diag.concat(straight)\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport class EmptyPiece extends ChessPiece {\r\n\tconstructor(i) {\r\n\t\tsuper(\r\n\t\t\tpieceRenders.NONE, \r\n\t\t\tplayers.NONE,  \r\n\t\t\ti\r\n\t\t)\r\n\t}\r\n}\r\n\r\n \r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {ChessBoard, King, Knight, Pawn, Rook, Bishop, Queen, pieceRenders, players, ChessPiece, EmptyPiece} from './game-components';\r\n\r\n\r\n\r\n// \r\nconst initBlackPieces = [\r\n\tnew Rook(players.PLAYER_2, 0),\r\n\tnew Knight(players.PLAYER_2, 1),\r\n\tnew Bishop(players.PLAYER_2, 2),\r\n\tnew Queen(players.PLAYER_2, 3),\r\n\tnew King(players.PLAYER_2, 4),\r\n\tnew Bishop(players.PLAYER_2, 5),\r\n\tnew Knight(players.PLAYER_2, 6),\r\n\tnew Rook(players.PLAYER_2, 7),\r\n\t\r\n\tnew Pawn(players.PLAYER_2, 8),\r\n\tnew Pawn(players.PLAYER_2, 9),\r\n\tnew Pawn(players.PLAYER_2, 10),\r\n\tnew Pawn(players.PLAYER_2, 11),\r\n\tnew Pawn(players.PLAYER_2, 12),\r\n\tnew Pawn(players.PLAYER_2, 13),\r\n\tnew Pawn(players.PLAYER_2, 14),\r\n\tnew Pawn(players.PLAYER_2, 15)\r\n\t\r\n]\r\n\r\nconst emptySquares = [...Array(48-16).keys()].map(x => x+16).map(y => new EmptyPiece(y))\r\n\r\nconst initWhitePieces = [\r\n\tnew Pawn(players.PLAYER_1, 48),\r\n\tnew Pawn(players.PLAYER_1, 49),\r\n\tnew Pawn(players.PLAYER_1, 50),\r\n\tnew Pawn(players.PLAYER_1, 51),\r\n\tnew Pawn(players.PLAYER_1, 52),\r\n\tnew Pawn(players.PLAYER_1, 53),\r\n\tnew Pawn(players.PLAYER_1, 54),\r\n\tnew Pawn(players.PLAYER_1, 55),\r\n\t\r\n\t\r\n\tnew Rook(players.PLAYER_1, 56),\r\n\tnew Knight(players.PLAYER_1, 57),\r\n\tnew Bishop(players.PLAYER_1, 58),\r\n\tnew Queen(players.PLAYER_1, 59),\r\n\tnew King(players.PLAYER_1, 60),\r\n\tnew Bishop(players.PLAYER_1, 61),\r\n\tnew Knight(players.PLAYER_1, 62),\r\n\tnew Rook(players.PLAYER_1, 63),\r\n]\r\n\t\r\n// const [a, setA] = useState()\r\n\r\n\t\r\nconst initBoard = new ChessBoard(initBlackPieces.concat(emptySquares).concat(initWhitePieces))\r\n\r\n\r\n\r\nfunction Square(props) {\r\n\tlet sel = \"\"\r\n\tif (props.piece.selected) {\r\n\t\tsel = \" selected\"\r\n\t}\r\n\tlet squareColor = \"lightSquare\"\r\n\tif ((Math.floor(props.piece.i / 8) % 2) == (props.piece.i % 2)){\r\n\t\tsquareColor = \"darkSquare\"\r\n\t}\r\n\tlet cn = squareColor + \" \" + sel\r\n\treturn (\r\n\t\t<button className={cn} onClick={props.onClick}>\r\n\t\t\t{props.piece.pieceUnicode}\r\n\t\t</button>\r\n\t)\r\n\t\r\n}\r\n\r\nclass RenderPiece {\r\n\tconstructor(piece) {\r\n\t\tthis.pieceRender = piece.pieceRender\r\n\t\tthis.player = piece.player\r\n\t}\r\n}\r\n\r\nclass Board extends React.Component {\r\n\t\r\n\trenderSquare(i) {\r\n\t\treturn <Square \r\n\t\t\t\t\tpiece={this.props.squares[i]}\r\n\t\t\t\t\tonClick={() => this.props.onClick(i)}\r\n\t\t\t\t/>\r\n\t}\r\n\t\r\n\trenderRow(rn) {\r\n\t\treturn <div className=\"board-row\">\r\n\t\t\t{this.renderSquare(rn*8 + 0)}\r\n\t\t\t{this.renderSquare(rn*8 + 1)}\r\n\t\t\t{this.renderSquare(rn*8 + 2)}\r\n\t\t\t{this.renderSquare(rn*8 + 3)}\r\n\t\t\t{this.renderSquare(rn*8 + 4)}\r\n\t\t\t{this.renderSquare(rn*8 + 5)}\r\n\t\t\t{this.renderSquare(rn*8 + 6)}\r\n\t\t\t{this.renderSquare(rn*8 + 7)}\r\n\t\t</div>\r\n\t}\r\n\r\n\trender() {\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.renderRow(0)}\r\n\t\t\t\t{this.renderRow(1)}\r\n\t\t\t\t{this.renderRow(2)}\r\n\t\t\t\t{this.renderRow(3)}\r\n\t\t\t\t{this.renderRow(4)}\r\n\t\t\t\t{this.renderRow(5)}\r\n\t\t\t\t{this.renderRow(6)}\r\n\t\t\t\t{this.renderRow(7)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass Game extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\thistory: [{\r\n\t\t\t\tsquares: initBoard\r\n\t\t\t}],\r\n\t\t\tplayerTurn: players.PLAYER_1,\r\n\t\t\tmoveNumber: 0,\r\n\t\t\tmoveStage: \"readyToSelect\",\r\n\t\t\tpieceSelected: null\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t}\r\n\t\r\n\thandleClick(i) {\r\n\t\tif (this.state.moveStage === \"readyToSelect\") {\r\n\t\t\treturn this.handlePieceSelect(i);\r\n\t\t} else {\r\n\t\t\treturn this.handlePieceMove(i);\r\n\t\t}\r\n\t}\r\n\t\r\n\thandlePieceSelect(i) {\r\n\t\tconst hist = this.state.history.slice(0, this.state.moveNumber + 1);\r\n\t\tconst current = hist[this.state.moveNumber];\r\n\t\tconst squares = current.squares.copy();\r\n\t\tconst pieceSelected = squares.getPiece(i);\r\n\t\t\r\n\t\tif (! (this.state.playerTurn === pieceSelected.player)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (! (pieceSelected.hasLegalMove(squares.copy()))) {\r\n\t\t\tconsole.log('no move')\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet newSquares = squares.selectPiece(i)\r\n\t\thist[this.state.moveNumber].squares = newSquares\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\thistory: hist,\r\n\t\t\tmoveStage: \"readyToMove\",\r\n\t\t\tpieceSelected: pieceSelected.copy()\r\n\t\t\t\r\n\t\t})\r\n\t}\r\n\t\r\n\thandlePieceMove(i) {\r\n\t\tconst hist = this.state.history.slice(0, this.state.moveNumber + 1);\r\n\t\tconst current = hist[hist.length - 1];\r\n\t\tlet squares = current.squares.copy();\r\n\t\tlet new_square = squares.getPiece(i);\r\n\t\t\r\n\t\tif (! (this.state.pieceSelected.isLegalMove(i, squares.copy()))) {\r\n\t\t\tconsole.log('fire');\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet updatedSquares = squares.unselectPiece()\r\n\t\thist[hist.length - 1].squares = updatedSquares\r\n\t\tlet sel = this.state.pieceSelected.copy();\r\n\t\tsquares = this.handleKingMove(squares, sel.i, i)\r\n\t\tsquares = squares.pieceMove(sel.i, i)\r\n\t\t\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\thistory: hist.concat([{\r\n\t\t\t\tsquares: squares\r\n\t\t\t}]),\r\n\t\t\t\r\n\t\t\tmoveStage: \"readyToSelect\",\r\n\t\t\tpieceSelected: null,\r\n\t\t\tplayerTurn: this.state.playerTurn === players.PLAYER_1 ? players.PLAYER_2 : players.PLAYER_1,\r\n\t\t\tmoveNumber: hist.length\r\n\t\t});\r\n\t\t// console.log(.blackPieces)\r\n\t}\r\n\t\r\n\thandleKingMove(squares, startLoc, endLoc) {\r\n\t\tlet startPiece = squares.getPiece(startLoc)\r\n\t\tlet endPiece = squares.getPiece(endLoc)\r\n\t\t\r\n\t\tif (startPiece.pieceRender == pieceRenders.KING) {\r\n\t\t\tconsole.log('a')\r\n\t\t\tif (Math.abs(startPiece.x - endPiece.x) == 2) {\r\n\t\t\t\tlet returned;\r\n\t\t\t\tif (startPiece.x > endPiece.x) {\r\n\t\t\t\t\tlet rookI = endPiece.i - 2\r\n\t\t\t\t\treturned = squares.pieceMove(rookI, rookI + 3)\r\n\t\t\t\t\treturned.castled[startPiece.player] = true\r\n\t\t\t\t}\r\n\t\t\t\telse if (startPiece.x < endPiece.x) {\r\n\t\t\t\t\tlet rookI = endPiece.i + 1\r\n\t\t\t\t\tconsole.log('rooki')\r\n\t\t\t\t\tconsole.log(rookI)\r\n\t\t\t\t\treturned = squares.pieceMove(rookI, rookI - 2)\r\n\t\t\t\t\treturned.castled[startPiece.player] = true\r\n\t\t\t\t}\r\n\t\t\t\treturn returned\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet returned = squares.copy()\r\n\t\t\t\treturned.castled[startPiece.player] = true\r\n\t\t\t\treturn returned\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn squares\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tjumpTo(step) {\r\n\t\tthis.setState({\r\n\t\t\tmoveNumber: step,\r\n\t\t\tmoveStage: \"readyToSelect\",\r\n\t\t\tpieceSelected: null,\r\n\t\t\tplayerTurn: (step % 2) == 0 ? players.PLAYER_1 : players.PLAYER_2\r\n\t\t});\r\n\t}\t\t\r\n\t\r\n\trender() {\r\n\t\t\r\n\t\tconst history = this.state.history\r\n\t\tconst current = history[this.state.moveNumber]\r\n\t\tconst calcWinner = calculateWinner(current.squares.pieceList);\r\n\t\t\r\n\t\tconst moves = history.map((step, move) => {\r\n\t\t\tconst desc = move ?\r\n\t\t\t\t'Go to move #' + move : \r\n\t\t\t\t'Go to game start';\r\n\t\t\t\r\n\t\t\treturn (\r\n\t\t\t\t<li key={move}>\r\n\t\t\t\t\t<button onClick={() => this.jumpTo(move)}> {desc} \r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\t\t});\r\n\t\t\r\n\t\tlet status;\r\n\t\tif(calcWinner) {\r\n\t\t\tstatus = 'Winner: ' + calcWinner;\r\n\t\t} else {\r\n\t\t\tstatus = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n\t\t}\r\n\t\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t<div className=\"game-board\">\r\n\t\t\t\t<Board \r\n\t\t\t\tsquares={current.squares.pieceList}\r\n\t\t\t\tonClick={i => this.handleClick(i)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"game-info\">\r\n\t\t\t\t<div>{status}</div>\r\n\t\t\t\t<ol>{moves}</ol>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// <div className=\"container\">\r\n\t\t\t\t\t// <BoardSquare\r\n\t\t\t\t\t// color=\"light\"\r\n\t\t\t\t\t// />\r\n\t\t\t\t\t// <Square \r\n\t\t\t\t\t\t// piece={new King(players.PLAYER_2, 1)}\r\n\t\t\t\t\t\t// onClick={() => 1}\r\n\t\t\t\t\t// />\r\n\t\t\t\t// </div>\r\n\r\nfunction calculateWinner(squares) {\r\n  \r\n  // TODO\r\n  return null;\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}